@page "/"
@rendermode InteractiveServer
@using instech_blazor_coding_task.Models
@using instech_blazor_coding_task.Services
@using System.Text.Json;
@inject IDragService DragService
@inject IPositionService PositionService
@inject IApiService ApiService

<PageTitle>Bin packing problem</PageTitle>

@* The OnDragMove method updates the position of the element being dragged relative to the page.
Therefore the first element has to handle it. *@
<div @onmousemove="OnDragMove">
    <PageHeader OnTryAgainClick="GenerateNewVessels" />

    @if (Vessels == null)
    {
        <div>Loading...</div>
    }
    else
    {
        <AnchorageBox Width="anchorageWidth" Height="anchorageHeight" />
        
        @foreach (var vessel in Vessels)
        {
            <VesselItem 
                Vessel="vessel" 
                OnMouseDown="@(e => OnDragStart(vessel, e))"
                OnMouseUp="@(e => OnDragEnd(Vessels))" />
        }
        
        <SuccessMessage IsVisible="anchorageFull" />
    }
</div>

@code {
private double anchorageWidth = 500;

private double anchorageHeight = 500;

private List<Vessel>? Vessels = new List<Vessel>();

private bool anchorageFull = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadVesselsFromApi();
    }

    private async Task LoadVesselsFromApi()
    {
        try
        {
            var response = await ApiService.GetRandomFleetAsync();

            if (response == null)
            {
                Console.WriteLine("Failed to fetch fleet data");
                return;
            }
            
            if (response.anchorageSize != null)
            {
                anchorageHeight = response.anchorageSize.Height * 20;
                anchorageWidth = response.anchorageSize.Width * 20;
            }

            Vessels = new List<Vessel>();
            
            if (response.fleets != null)
            {
                const int numberOfColumns = 3;
                const int columnSpacing = 20; // Spacing between columns
                const int vesselSpacing = 10; // Spacing between vessels in a column
                
                // Track Y offset for each column
                double[] columnYOffsets = new double[numberOfColumns];
                int currentColumn = 0;
                
                // Calculate column width
                double maxVesselWidth = 150; // Default width for column spacing
                
                foreach (var fleet in response.fleets)
                {
                    if (fleet?.singleShipDimensions != null)
                    {
                        for (int i = 0; i < fleet.shipCount; i++)
                        {
                            double vesselWidth = fleet.singleShipDimensions.width * 20;
                            double vesselHeight = fleet.singleShipDimensions.height * 20;
                            
                            // Calculate X position based on current column
                            double columnXPosition = anchorageWidth + 50 + (currentColumn * (maxVesselWidth + columnSpacing));
                            
                            Vessels.Add(new Vessel
                            {
                                Width = vesselWidth,
                                Height = vesselHeight,
                                PositionX = columnXPosition,
                                PositionY = columnYOffsets[currentColumn]
                            });
                            
                            // Update Y offset for this column
                            columnYOffsets[currentColumn] += vesselHeight + vesselSpacing;
                            
                            // Move to next column
                            currentColumn = (currentColumn + 1) % numberOfColumns;
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading vessels: " + ex.Message);
        }
    }

private void OnDragStart(Vessel vessel, MouseEventArgs e) {
    DragService.OnDragStart(vessel, e);
}

private void OnDragMove(MouseEventArgs e) {
    DragService.OnDragMove(e);
}

private void OnDragEnd(IEnumerable<Vessel> allVessels) {
    DragService.OnDragEnd(allVessels, PositionService);
    anchorageFull = AllVesselsInAnchorage(allVessels);
}

private bool AllVesselsInAnchorage(IEnumerable<Vessel> allVessels) {
    foreach(var vessel in allVessels) {
        if (!PositionService.IsInAnchorage(vessel, new Anchorage {Width = anchorageWidth, Height = anchorageHeight})) {
            return false;
        }
    }

    return true;
}

private async Task GenerateNewVessels() {
    anchorageFull = false;
    Vessels = null;
    await LoadVesselsFromApi();
}
}